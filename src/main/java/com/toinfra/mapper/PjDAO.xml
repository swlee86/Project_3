<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.toinfra.DAO.PjDAO">

<!--
	작성일 : 2017-04-25
	작성자 : 이상원
	사용 목적 : 프로젝트에 대한 mapper 리팩토링

-->

	<!--프로젝트 송신 리스트-->
	<select id="select_Send_Pj_rec" resultType="com.toinfra.DTO.Pj">
              select one.pj_content,one.pj_no,one.user_id,one.user_name,one.pj_title,one.pj_start,one.pj_end,one.step_no,one.rec_user_id, userDto.emp_name as rec_emp_name from(
          		select p.pj_no, p.user_id, e.user_name, p.pj_title, p.pj_start, p.pj_end, p.step_no,p.rec_user_id,p.pj_content
          		from pj p join user e on p.user_id = e.user_id
          		where p.emp_no =  #{param1} and p.step_no != '1' and (${param2} like '%${param3}%')
              ) one join userDto on one.rec_user_id = emp.user_id
	</select>
	
	
	<!-- 프로젝트 송신 전체 갯수 가져오는 함수 -->
	<select id="selectSendCount" resultType="int">
		select nvl(count(*),0) 
		from pj  p join userDto e on p.emp_no = e.emp_no
		where p.emp_no = #{param1} and (${param2} like '%${param3}%') and p.step_no != '1'
	</select> 
	
	
 	<select id="selectApprovalCount" resultType="int">
		select nvl(count(*),0) 
		from pj  p join userDto e on p.emp_no = e.emp_no
		where p.rec_user_id = #{param1} and (${param2} like '%${param3}%') and p.step_no != '1'
	</select> 
	
	<select id="selectStepName">
		 select step_no from approval where step_name=#{step_name}
	</select>
	
	<!-- 등록인 사번 구하는 함수 -->
	<select id="selectInfoSearch" resultType="com.toinfra.DTO.UserDto">
		select e.emp_no
		from  user_detail d join userDto e
		on d. emp_no = e.emp_no
		where d.id=#{id}
	</select>
	
	<select id="selectMaxPj_no"  resultType="int">
		select max(to_number(pj_no)) from pj
	</select>
	
	<!-- 프로젝트 등록하기 -->
	<insert id="insertPj">
		insert into pj(pj_no, emp_no, pj_title, pj_content, pj_start, pj_end, pj_progress, rec_user_id, pj_step_no, step_no)
		values(pj_seq.nextval, #{emp_no}, #{pj_title}, #{pj_content}, #{pj_start}, #{pj_end}, '0', #{rec_emp_no}, '2', '4')
	</insert>
	
	<insert id="insertPjd_people">
		insert into pjd_people(pjd_no, emp_no)
		values(#{param1}, #{param2})
	</insert>
	
	<!-- 프로젝트 상세 등록하기 -->
	<insert id="insertPjd">
		insert into pjd(pjd_no, pj_no, pjd_title, 
					    pjd_content, pjd_start, pjd_end, 
					    pj_step_no, pjd_progress)
		values(pjd_seq.nextval, #{pj_no}, #{pjd_title},
			   #{pjd_content}, #{pjd_start}, #{pjd_end}, 
			   '2','0')
	</insert>
	
	<!--프로젝트 상세번호  -->
	<select id="selectMaxPjd_no" resultType="String">
		select e.pjd_no
		from(select pjd_no from pjd order by to_number(pjd_no) desc) e
		where ROWNUM &lt;= #{numrow}
	</select>
	
	<!-- 프로젝트 승인 대기함 조회하기 -->
	<select id="selectPj_rec" resultType="com.toinfra.DTO.Pj">
		select pj_no, emp_no, emp_name, pj_title, pj_start, pj_end, step_no from(
        	select rownum num, n.pj_no, n.emp_no, n.emp_name, n.pj_title, n.pj_start, n.pj_end, n.step_no from(
          		select p.pj_no, p.emp_no, e.emp_name, p.pj_title, p.pj_start, p.pj_end, p.step_no
          		from pj p join userDto e on p.emp_no = e.emp_no
          		where p.rec_user_id = #{param5} and p.step_no != '1' and (${param3} like '%${param4}%')
          		order by to_number(p.pj_no) DESC
        	)n 
    	)where num between 1 + (${param1} * ${param2})-${param2} and ${param1}*${param2}
	</select>
	
	<!-- 프로젝트 승인 대기함 큰 프로젝트 상세보기 -->
	<select id="selectPj_detail" resultType="com.toinfra.DTO.Pj">
	  select  p.pj_no,p.emp_no,e.emp_name,pj_title, pj_content, pj_start, pj_end, step_no
      from pj p join userDto e on p.emp_no = e.emp_no
      where  p.pj_no=#{pj_no}
	</select>
	
	<!-- 프로젝트 승인 대기함 큰프로젝트의 상세 프로젝트 보기 -->
	<select id="selectPjd_detail" resultType="com.toinfra.DTO.Pjd">
	 	SELECT pjd_no ,SUBSTR( XMLAGG( XMLELEMENT(COL ,', ', emp_name) ORDER BY emp_name).EXTRACT('//text()' ).GETSTRINGVAL(), 2) emp_name, pjd_title, pjd_content,pjd_start, pjd_end 
   		FROM ( 
         select e.emp_name, p_p.pjd_no, pd.pjd_title, pd.pjd_content, pd.pjd_start, pd.pjd_end
         from pjd_people p_p join userDto e on p_p.emp_no = e.emp_no
         join pjd pd 
         on pd.pjd_no = p_p.pjd_no
         where pd.pjd_no in 
            (
              select distinct p.pjd_no
              from pjd p join pjd_people p_p
              on p.pjd_no = p_p.pjd_no
              where pj_no=#{pj_no}
            )
         )
  		GROUP BY pjd_no,pjd_title,pjd_content,pjd_start,pjd_end
	</select>
	
	
	<!-- 프로젝트 진행 단계 처리하기 -->
	<update id="updatePj_step">
		update pj
		set pj_step_no = #{pj_step_no}
		where pj_no = #{pj_no}
	</update>
	
	<!-- 프로젝트 승인 처리하기 -->
	<update id="updatePj_approval">
		update pj
		set step_no = #{param2}
		where pj_no = #{param1}
	</update>
	
	<!-- 프로젝트 조회하기(승인처리된것들만) -->
	<select id="selectPj" resultType="com.toinfra.DTO.Pj">
		select pj_no, p.user_id, e.user_name, l.dept_name, pj_title, pj_content, pj_start,
		       pj_end, pj_progress, p.pj_step_no, s.pj_step_name
		from pj p join user e
			  on p.user_id = e.user_id
			join pj_step s
			  on p.pj_step_no = s.pj_step_no
	    join low_dept l
	      on e.low_dept_no = l.low_dept_no
			where p.step_no = (select step_no from approval where step_name='승인')
			order by s.step asc, pj_start desc
	</select>
	
	<!-- 프로젝트에서 내가 만든 프로젝트만 조회하기(승인처리된것들만) -->
	<select id="selectPj_write" parameterType="String" resultType="com.toinfra.DTO.Pj">
		select p.pj_no, p.user_id, e.user_name, l.dept_name,
				pj_title, pj_content, pj_start, 
				pj_end, pj_progress, p.pj_step_no, s.pj_step_name
		from pj p 
		join pj_step s
				on p.pj_step_no = s.pj_step_no
		join user e
				on p.user_id = e.user_id
		join low_dept l
		      on e.low_dept_no = l.low_dept_no      
		where  p.user_id=#{emp_no} and step_no = (select step_no from approval where step_name='승인')
		order by s.step asc, pj_start desc
	</select>
	
	<!-- 프로젝트에서 내가 포함된 프로젝트만 조회하기(승인처리된것들만) -->
	<select id="selectPj_include" parameterType="String" resultType="com.toinfra.DTO.Pj">
		select p.pj_no, p.user_id, e.user_name, l.dept_name,
				pj_title, pj_content, pj_start, 
				pj_end, pj_progress, p.pj_step_no, s.pj_step_name
		from pj p 
		join pj_step s
				on p.pj_step_no = s.pj_step_no
		join user e
				on p.user_id = e.user_id
		join low_dept l
				on e.low_dept_no = l.low_dept_no      
		where pj_no in (select distinct(pj_no) from pjd where pjd_no in (select pjd_no from pjd_people where user_id=#{emp_no}))
			        and step_no = (select step_no from approval where step_name='승인')
		order by s.step asc, pj_start desc
	</select>
	
	
	<!-- 프로젝트 내가 작성한것 and 내가 참여자인것 프로젝트 목록 가져오기 --> 
	<select id="selectPj_callendar" parameterType="String" resultType="com.toinfra.DTO.Pj">
		select p.pj_no, p.user_id, e.user_name, l.dept_name,
            pj_title, pj_content, pj_start, 
            pj_end, pj_progress, p.pj_step_no, s.pj_step_name
     	from pj p 
      	join pj_step s
            on p.pj_step_no = s.pj_step_no
      	join user e
            on p.user_id = e.user_id
      	join low_dept l
            on e.low_dept_no = l.low_dept_no      
      	where ((pj_no in (select distinct(pj_no) from pjd where pjd_no in (select pjd_no from pjd_people where user_id=#{emp_no}))) or p.user_id=#{emp_no})
                 and step_no = (select step_no from approval where step_name='승인')
      	order by s.step asc, pj_start desc
	</select>
	
	<!-- 프로젝트 작성자의 아이디 가져오기  -->
	<select id="selectPj_writeempno" resultType="String">
		select user_id from pj where pj_no =(select pj_no from pjd where pjd_no=#{pjd_no})
	</select>
	
	<!-- 프로젝트 검색 -->
	<select id="searchPj" resultType="com.toinfra.DTO.Pj">
		select pj_no, p.user_id, e.user_name, l.dept_name, pj_title, pj_content, pj_start,
		       pj_end, pj_progress, p.pj_step_no, s.pj_step_name
		from pj p join user e
			  on p.user_id = e.user_id
			join pj_step s
			  on p.pj_step_no = s.pj_step_no
	    join low_dept l
	      on e.low_dept_no = l.low_dept_no
			where p.step_no = (select step_no from approval where step_name='승인')
			and ${param1} like '%${param2}%'
      order by s.step asc, pj_start desc
	</select>
	
	<!-- 현재 상세프로젝트가 포함된 프로젝트의 모든 상세 프로젝트들의 진행상황 가져오기 ( = pj_no가 같은 pjd들의 진행상황 )   -->
	<select id="selectPjstepno_Of_includePjdno" resultType="String">
		select pj_step_no from pjd 
   		where pj_no = (select pj_no from pjd where pjd_no=#{pjd_no})
	</select>
	
	<!-- 프로젝트의 진행단계 업데이트 -->
	<update id="updatePjstepno" parameterType="hashmap">
		update pj set pj_step_no = #{pj_step_no} where pj_no = (select pj_no from pjd where pjd_no=#{pjd_no})
	</update>
	
	<!-- 프로젝트의 시작일, 종료일 가져오기 -->
	<select id="selectPjDate" resultType="com.toinfra.DTO.Pj">
		select pj_start,pj_end from pj where pj_no = (select pj_no from pjd where pjd_no=#{pjd_no})	
	</select>
	
</mapper>